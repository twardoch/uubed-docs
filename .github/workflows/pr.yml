name: Pull Request

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  pr-check:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pyyaml flake8 black isort
    
    - name: Get version information
      run: |
        python version.py --info
        echo "VERSION=$(python version.py)" >> $GITHUB_ENV
    
    - name: Lint check
      run: |
        echo "Running linting checks..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check --diff .
        isort --check-only --diff .
    
    - name: Run tests
      run: |
        echo "Running test suite..."
        python -m pytest tests/ -v --tb=short
    
    - name: Test build
      run: |
        echo "Testing documentation build..."
        python -m mkdocs build --verbose
    
    - name: Check for broken links
      run: |
        echo "Checking for broken internal links..."
        python -c "
import yaml
import re
from pathlib import Path

def check_internal_links():
    docs_dir = Path('docs')
    errors = []
    
    for md_file in docs_dir.rglob('*.md'):
        content = md_file.read_text(encoding='utf-8')
        
        # Find markdown links
        link_pattern = r'\[([^\]]+)\]\(([^)]+)\)'
        matches = re.findall(link_pattern, content)
        
        for match in matches:
            link_text, link_url = match
            
            # Skip external links
            if link_url.startswith(('http://', 'https://', 'mailto:')):
                continue
                
            # Skip anchors
            if link_url.startswith('#'):
                continue
                
            # Check internal links
            if not link_url.startswith('/'):
                target_path = (md_file.parent / link_url).resolve()
                if target_path.suffix == '':
                    target_path = target_path.with_suffix('.md')
            else:
                target_path = docs_dir / link_url.lstrip('/')
                if target_path.suffix == '':
                    target_path = target_path.with_suffix('.md')
            
            # Skip if path goes outside docs directory
            try:
                target_path.relative_to(docs_dir)
            except ValueError:
                continue
                
            if target_path.suffix == '.md' and not target_path.exists():
                errors.append(f'Broken link in {md_file}: {link_url} -> {target_path}')
    
    if errors:
        print('Found broken internal links:')
        for error in errors:
            print(f'  ❌ {error}')
        return False
    else:
        print('✅ No broken internal links found')
        return True

if not check_internal_links():
    exit(1)
"
    
    - name: Add PR comment
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Check Results')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
          const version = '${{ env.VERSION }}';
          
          const body = `## 🔍 PR Check Results
          
          **Status**: ${status}
          **Version**: ${version}
          **Commit**: ${context.sha.substring(0, 7)}
          
          ### Checks Performed
          - ✅ Code linting (flake8, black, isort)
          - ✅ Test suite execution
          - ✅ Documentation build
          - ✅ Internal link validation
          
          ### Build Information
          - **Python Version**: 3.11
          - **MkDocs Build**: ${{ job.status === 'success' && 'Success' || 'Failed' }}
          - **Test Results**: ${{ job.status === 'success' && 'All tests passed' || 'Some tests failed' }}
          
          ---
          
          *This comment is automatically updated for each commit.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  preview-deploy:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: pr-check
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        ./build.sh
    
    - name: Deploy to preview
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        destination_dir: pr-${{ github.event.pull_request.number }}
        keep_files: false
    
    - name: Comment preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const previewComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Preview Deployment')
          );
          
          const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-${{ github.event.pull_request.number }}/`;
          
          const body = `## 🚀 Preview Deployment
          
          Your changes have been deployed to a preview environment:
          
          **Preview URL**: ${previewUrl}
          
          The preview will be updated automatically when you push new commits to this PR.
          
          ---
          
          *This preview will be removed when the PR is closed.*`;
          
          if (previewComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: previewComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }